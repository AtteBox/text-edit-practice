import { test, expect, Page, ElementHandle } from "@playwright/test";

const isMac = process.platform === "darwin";

test("when page is loaded, initially show start view", async ({ page }) => {
  await page.goto("/");
  await expect(page.getByText("Welcome to Typo Terminator!")).toBeVisible();
  await expect(page.getByRole("button", { name: "Start Game" })).toBeVisible();
});

test("when played through first level, show level results", async ({
  page,
}) => {
  await page.goto("/");
  await page.getByRole("button", { name: "Start Game" }).click();
  await expect(page.getByText("Level 1")).toBeVisible();
  const textarea = await page.$("textarea");
  for (const key of keysByLevel[0]) {
    await pressGameKey(textarea, key);
  }
  await expect(page.getByText("Level 1 Completed")).toBeVisible();
  await expect(page.getByRole("button", { name: "Next Level" })).toBeVisible();
  for (const text of ["Germs: 0/69", "Animals: 44/44", "Difficulty: 100"]) {
    await expect(page.getByText(text, { exact: true })).toBeVisible();
  }
  // points nor time should not change after level completion
  const points = await extractPoints(page);
  const time = await extractTime(page);
  await page.waitForTimeout(2000);
  await expect(extractPoints(page)).resolves.toBe(points);
  await expect(extractTime(page)).resolves.toBe(time);

  await expect(points).toBeGreaterThanOrEqual(0);
  await expect(points).toBeLessThanOrEqual(200);
  await expect(time).toBeGreaterThanOrEqual(0);
  await expect(time).toBeLessThanOrEqual(100);
});

test("when played through first level with too many mistakes, show level failed message", async ({
  page,
}) => {
  await page.goto("/");
  await page.getByRole("button", { name: "Start Game" }).click();
  await expect(page.getByText("Level 1")).toBeVisible();
  const textarea = await page.$("textarea");
  for (const key of level1FailKeys) {
    await pressGameKey(textarea, key);
  }
  await expect(page.getByText("Level 1 Failed")).toBeVisible();
  await expect(page.getByRole("button", { name: "Restart Game" })).toBeVisible();
  for (const text of ["Germs: 0/69", "Animals: 0/44", "Difficulty: 100"]) {
    await expect(page.getByText(text, { exact: true })).toBeVisible();
  }
  await expect(extractPoints(page)).resolves.toBe(0);

  // when pressing restart game, should go back to start view
  await page.getByRole("button", { name: "Restart Game" }).click();
  await expect(page.getByText("Welcome to Typo Terminator!")).toBeVisible();
});

test("when played through the game, show finished game view and calculate total points correctly", async ({
  page,
}) => {
  await page.goto("/");
  await page.getByRole("button", { name: "Start Game" }).click();
  let totalPoints = 0;
  for (let i = 0; i < keysByLevel.length; i++) {
    const isLastLevel = i === keysByLevel.length - 1;
    await expect(page.getByText(`Level ${i + 1}`)).toBeVisible();
    // points should be zero at the beginning of each level
    await expect(extractPoints(page)).resolves.toBe(0);
    const textarea = await page.$("textarea");
    for (const key of keysByLevel[i]) {
      await pressGameKey(textarea, key);
    }
    if (isLastLevel) {
      await expect(page.getByText(`Congratulations!`)).toBeVisible();
    } else {
      await expect(page.getByText(`Level ${i + 1} Completed`)).toBeVisible();
    }
    totalPoints += await extractPoints(page);
    await expect(page.getByText("Total Points: " + totalPoints)).toBeVisible();
    if (!isLastLevel) {
      await page.getByRole("button", { name: "Next Level" }).click();
    }
  }
});

/**
 * Presses a key in the game textarea
 * @param gameElement
 * @param key key to press
 */
async function pressGameKey(gameElement: ElementHandle | null, key: string) {
  if (!gameElement) {
    throw new Error("Game textarea is undefined");
  }
  await gameElement.press(isMac ? key.replace("Control", "Alt") : key);
}

/**
 * Extracts points from the last "Points: " text on the page
 * @param page
 * @returns points as integer
 */
async function extractPoints(page: Page) {
  const pointsRegex = /^Points: ([0-9]+)/;
  const points = await page.getByText(pointsRegex, { exact: true }).all();
  if (points.length === 0) {
    throw new Error("Points not found on page");
  }
  const pointsText = await points[points.length - 1].textContent();
  const match = pointsText!.match(pointsRegex);
  return Number(match![1]);
}

/** Extracts time from the last "Time: " text on the page
 * @param page
 * @returns time as integer
 * */
async function extractTime(page: Page) {
  const timeRegex = /^Time: ([0-9]+)\//;
  const time = await page.getByText(timeRegex, { exact: true });
  const timeText = await time.textContent();
  const match = timeText!.match(timeRegex);
  return Number(match![1]);
}

const keysByLevel = [
  [
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+ArrowRight",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
  ],
  [
    "Control+Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "Control+ArrowLeft",
    "Control+ArrowLeft",
    "Control+Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "Control+ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "Backspace",
    "Control+ArrowLeft",
    "ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "Backspace",
    "Control+ArrowLeft",
    "Control+ArrowLeft",
    "Backspace",
    "Control+Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "ArrowLeft",
    "ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "Control+ArrowLeft",
    "Control+ArrowLeft",
    "ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "Control+ArrowLeft",
    "Control+ArrowRight",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "ArrowRight",
    "ArrowRight",
    "Control+Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "Control+ArrowLeft",
    "Control+ArrowLeft",
    "Control+ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "ArrowRight",
    "ArrowRight",
    "Backspace",
    "Control+ArrowLeft",
    "ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "Control+ArrowLeft",
    "Control+ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "ArrowRight",
    "ArrowRight",
    "ArrowRight",
    "Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
  ],
  [
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
  ],
  [
    "Control+Delete",
    "Control+ArrowRight",
    "ArrowLeft",
    "ArrowLeft",
    "Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Control+Delete",
    "Control+ArrowRight",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "ArrowRight",
    "Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Control+Delete",
    "Control+ArrowRight",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "ArrowRight",
    "Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "ArrowRight",
    "ArrowRight",
    "ArrowRight",
    "ArrowLeft",
    "Delete",
    "ArrowRight",
    "ArrowRight",
    "ArrowRight",
    "Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Control+Delete",
    "Control+ArrowRight",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "ArrowRight",
    "Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "ArrowRight",
    "ArrowRight",
    "Delete",
    "Control+ArrowRight",
    "ArrowRight",
    "Delete",
    "Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Control+ArrowLeft",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "ArrowLeft",
    "ArrowLeft",
    "Delete",
    "Control+ArrowRight",
    "ArrowRight",
    "Delete",
    "Delete",
    "Control+ArrowRight",
    "ArrowRight",
    "Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "ArrowRight",
    "Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "ArrowRight",
    "ArrowRight",
    "Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Delete",
    "ArrowRight",
    "Delete",
    "Control+ArrowRight",
    "ArrowRight",
    "ArrowRight",
    "ArrowRight",
    "Delete",
    "Delete",
    "Control+ArrowRight",
    "ArrowLeft",
    "ArrowLeft",
    "Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "ArrowRight",
    "ArrowRight",
    "Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+ArrowRight",
    "ArrowLeft",
    "ArrowLeft",
    "Delete",
    "ArrowRight",
    "Control+Delete",
  ],
  [
    "Delete",
    "Delete",
    "Control+Backspace",
    "Control+Backspace",
    "Control+Delete",
    "Control+ArrowLeft",
    "Backspace",
    "Backspace",
    "ArrowLeft",
    "Control+Backspace",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "ArrowLeft",
    "Control+Backspace",
    "Control+Backspace",
    "Control+Backspace",
    "ArrowLeft",
    "Delete",
    "Delete",
    "Backspace",
    "ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "ArrowRight",
    "ArrowRight",
    "ArrowRight",
    "ArrowRight",
    "Backspace",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "ArrowRight",
    "ArrowRight",
    "ArrowRight",
    "ArrowRight",
    "ArrowRight",
    "Control+Backspace",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "ArrowRight",
    "Backspace",
    "Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "ArrowLeft",
    "ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "Backspace",
    "ArrowLeft",
    "Backspace",
    "Control+ArrowLeft",
    "Control+ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "Control+Backspace",
    "ArrowLeft",
    "Control+ArrowLeft",
    "ArrowRight",
    "ArrowRight",
    "ArrowRight",
    "ArrowRight",
    "ArrowRight",
    "ArrowRight",
    "ArrowLeft",
    "Control+Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "Backspace",
    "ArrowLeft",
    "Backspace",
    "Control+ArrowLeft",
    "Backspace",
    "Backspace",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "Control+Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "ArrowRight",
    "Backspace",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "Backspace",
    "Control+ArrowLeft",
    "Control+ArrowLeft",
    "ArrowRight",
    "ArrowRight",
    "ArrowRight",
    "ArrowRight",
    "Backspace",
    "ArrowLeft",
    "Backspace",
    "Control+ArrowLeft",
    "Control+Backspace",
    "Control+Backspace",
    "ArrowLeft",
    "ArrowLeft",
    "Backspace",
    "ArrowLeft",
    "Backspace",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+Backspace",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "ArrowRight",
    "ArrowRight",
    "ArrowLeft",
    "Delete",
    "Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Delete",
    "ArrowRight",
    "Delete",
    "Control+ArrowRight",
    "Control+Delete",
    "Control+Delete",
    "ArrowRight",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "Delete",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Control+Delete",
    "Control+Delete",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "Delete",
    "Delete",
    "Delete",
    "Control+ArrowRight",
    "ArrowLeft",
    "ArrowLeft",
    "ArrowLeft",
    "ArrowLeft",
    "ArrowLeft",
    "ArrowLeft",
    "Delete",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "Delete",
    "Delete",
    "ArrowRight",
    "Control+Delete",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "ArrowLeft",
    "ArrowLeft",
    "ArrowLeft",
    "ArrowLeft",
    "ArrowLeft",
    "Delete",
    "Delete",
    "ArrowRight",
    "Delete",
    "Delete",
    "ArrowRight",
    "Control+Delete",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "Delete",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "ArrowLeft",
    "ArrowRight",
    "Delete",
    "Delete",
    "ArrowRight",
    "Delete",
    "Delete",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Control+Delete",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "ArrowLeft",
    "Control+Delete",
    "ArrowRight",
    "Delete",
    "Delete",
    "Control+Delete",
    "Control+Delete",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Delete",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "ArrowLeft",
    "Control+Delete",
    "Control+Delete",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Delete",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "Delete",
    "Delete",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "Delete",
    "Control+Delete",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "Delete",
    "Control+ArrowRight",
    "Control+ArrowRight",
    "Control+ArrowLeft",
    "Delete",
    "Delete",
    "Delete",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "Delete",
    "ArrowRight",
    "ArrowRight",
    "ArrowLeft",
    "Delete",
    "ArrowRight",
    "Delete",
    "Delete",
    "Delete",
  ],
];

const level1FailKeys = [
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+ArrowRight",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
  "Control+Backspace",
];
